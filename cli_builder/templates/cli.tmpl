module main

import cli { Command, Flag, FlagType }
import encoding.base64
import net.http
import os
import prettyprint as pp
import term
import x.json2 { Any }


// ------------ Template utils ------------ //


fn get_fetch_config(method string, url string, data string, header http.Header, redirect bool) http.FetchConfig {
	return http.FetchConfig{
		method: http.method_from_str(method)
		url: url
		data: data
		header: header
		allow_redirect: redirect
	}
}

fn get_stdin_input() ?string {
	mut input := ''
	for {
		str := os.input_opt('') or { break }
		input += str
	}
	return input
}

pub fn execute_command(method string, path string, content_types []string, cmd Command) ? {
	mut url := path
	mut data := ''
	mut output := ''
	mut fail := false
	mut location := false
	mut header := http.new_header(http.HeaderConfig{})

	for flag in cmd.flags.get_all_found() {
		match flag.name {
			'body' {
				data = flag.get_string() ?
				if data == '-' {
					data = get_stdin_input() ?
				} else if os.is_file(data) {
					data = os.read_file(data) ?
				}
			}
			'header' {
				for h in flag.get_strings() ? {
					tmp := h.split(':')
					if tmp.len < 2 {
						println('Error: Wrong header format.')
						return
					}
					header.add_custom(tmp[0].to_lower(), tmp[1]) ?
				}
			}
			'auth' {
				auth := flag.get_string() ?
				header.add_custom('authorization', 'Basic ' + base64.encode_str(auth)) ?
			}
			'output' {
				output = flag.get_string() ?
				if os.exists(output) {
					println('Error: Output file already exists.')
					return
				}
			}
			'location' {
				location = flag.get_bool() ?
			}
			'fail' {
				fail = flag.get_bool() ?
			}
			else {
				url = url.replace('{' + flag.name + '}', flag.get_string() ?)
			}
		}
	}

	if content_types.len == 1 {
		header.add_custom('content_type', content_types.first()) ?
	}

	if content_types.len > 1 {
		values := header.custom_values('content-type', http.HeaderQueryConfig{true})
		if values.len != 1 || values[0] !in content_types {
			println('You must specify the content-type header once with one of these values: ' + content_types.str())
			return
		}
		header.add_custom('content_type', values[0]) ?
	}

	config := get_fetch_config(method, url, data, header, location)
	response := http.fetch(config) ?
	status_code := response.status().int()

	if status_code >= 400 {
		eprintln('Error: Received ' + status_code.str() + ' status code.')
		if fail {
			exit(1)
		}
		return
	}

	if 300 <= status_code && status_code < 400 {
		eprintln(term.warn_message('Warning: You received a redirection status_code, to enable redirection add the -l flag.'))
	}

	if output != '' {
		os.write_file(output, response.text) ?
	} else if response.header.get(http.CommonHeader.content_type) ? == 'application/json' {
		println(pp.pretty(response.text))
	} else {
		println(response.text)
	}
}

fn add_flag(mut cmd Command, flag_type FlagType, name string, abbrev string, required bool, description string) {
	cmd.add_flag(Flag{
		flag: flag_type
		name: name
		abbrev: abbrev
		required: required
		description: description
	})
}


// ------------- Template Main ------------ //


fn main() {

    mut app := Command{
        name: "@api.info.title"
        description: "@api.info.description"
        execute: fn (cmd Command) ? {
			println(cmd.help_message())
			return
		}
    }

	mut cmds := []Command{}
@for path, path_item in api.paths
	@for method, operation in path_item.get_operations()
	// -------------- New Command -------------- //

    cmds << Command{
        name: "@operation.operation_id"
		description: "@operation.description"
		execute: fn (cmd Command) ? {
			execute_command("@method", "@url" + "@path",
							@operation.get_request_body().content.keys(), cmd) ?
		}
    }
	@if operation.get_request_body().content.keys().len > 0
    add_flag(mut cmds[cmds.len - 1], FlagType.string, 'body', 'b', true, "Specify the Request body: '-' allow to read stdin, you can also specify a file to read or a valid body directly")
	@end
	@for parameter in operation.get_path_parameters()
	add_flag(mut cmds[cmds.len - 1], FlagType.string, '@parameter.name', '', @parameter.required, "Specify the @parameter.name url parameter")
	@end
	@end
@end

	// ----------------------------------------- //

	for mut command in cmds {
    	add_flag(mut command, FlagType.string_array, 'header', 'H', false, 'Add one or multiple headers to the Request. (you can use this multiple times)')
    	add_flag(mut command, FlagType.string, 'auth', 'u', @required, 'Specify your non-encoded http basic token for authentification.')
    	add_flag(mut command, FlagType.string, 'output', 'o', false, 'Specify the file where you want to write the Response. (Write in stdout by default)')
    	add_flag(mut command, FlagType.bool, 'location', 'l', false, 'Allow Request redirection. (False by default)')
    	add_flag(mut command, FlagType.bool, 'fail', 'f', false, 'Allow the program to return a non-zero return code in case of a 40X status code.')
	}

    app.add_commands(cmds)
    app.setup()
    app.parse(os.args)
}
