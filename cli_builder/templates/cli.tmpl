module main

import cli
import net.http
import os
import x.json2 { Any }

fn print_help_for_command(cmd cli.Command) ? {
	println('Here is a help message that help')
}

fn execute_command(method string, path string, cmd cli.Command) ? {
	mut url := '@{api.servers[0].url}' + path
	flags := cmd.flags.get_all_found()
	flags_name := flags.map(fn (elt cli.Flag) string {
		return elt.name
	})

	if 'body' in flags_name && 'body_stdin' in flags_name {
		println("Error: You cant use 'body' and 'body_stdin' simultaneously")
		return
	}

	if method in ['PUT', 'POST', 'PATCH'] && 'body' !in flags_name && 'body_stdin' !in flags_name {
		println("Error: Specifying a body is mandatory for this operation.")
		return
	}

	mut data := ""
	for flag in flags {
		if flag.flag == cli.FlagType.string {
			if flag.name != 'body' {
				url = url.replace('{' + flag.name + '}', flag.get_string() ?)
			} else {
				data = flag.get_string() ?
			}
		}
	}

	if 'body_stdin' in flags_name {
		data = os.input('Enter request body:\n')
	} else if os.is_file(data) {
		data = os.read_file(data) ?
	}

	mut response := http.Response{}
	match method {
		'GET' 	  { response = http.get(url) ? }
		'HEAD'    { response = http.head(url) ? }
		'DELETE'  { response = http.delete(url) ? }
		'PUT'     { response = http.put(url, data) ? }
		'POST'    { response = http.post(url, data) ? }
		'PATCH'   { response = http.patch(url, data) ? }
		'OPTIONS', 'TRACE' {
			println('Error: ' + method + ' method not supported for now.')
			return
		}
		else {
			println('Error: Unknown request method.')
			return
		}
	}

	println(response.text)
}

fn add_body_flags(mut cmd cli.Command, content []string) {
	if 'application/json' in content || 'application/xml' in content {
		cmd.add_flags([
			cli.Flag{
				flag: cli.FlagType.bool
				name: 'body_stdin'
			},
			cli.Flag{
				flag: cli.FlagType.string
				name: 'body'
			}
		])
	}
}

fn main() {
    mut app := cli.Command{
        name: "@api.info.title"
        description: "@api.info.description"
        execute: print_help_for_command
    }
	mut cmd := cli.Command{}
@for path, path_item in api.paths
	@for method, operation in path_item.operations
	if "@operation.operation_id" != "" {
    	cmd = cli.Command{
    	    name: "@operation.operation_id"
			description: "@operation.description"
    	}
		@for parameter in operation.get_parameters()
		if '@parameter.location' == 'path' {
			cmd.add_flag(cli.Flag{
				flag: cli.FlagType.string
				name: '@parameter.name'
				required: @parameter.required
			})
		}
		@end
		add_body_flags(mut cmd, @operation.get_request_body().content.keys())

    	cmd.execute = fn (cmd cli.Command) ? {
			execute_command("@method", "@path", cmd) ?
		}
    	app.add_command(cmd)
	}
	@end
@end

    app.setup()
    app.parse(os.args)
}